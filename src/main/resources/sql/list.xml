<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="list">
	<!-- MyQna(본인만) 리스트 목록 불러오기 -->
	<select id="selectMyqna" parameterType="hashmap" resultType="hashmap">
		select no, substr(title, 1, 10) as title, substr(contents, 1, 10) as contents, substr(date, 1, 10) as date, substr(answer, 1, 10) as answer, answercheck 
		from qna where del_yn = 'y' and id = #{id} limit #{start}, #{viewRow}
	</select>
	
	<!-- MyQna(본인만) 리스트 목록의 갯수 -->
	<select id="totCntMyqna" parameterType="hashmap" resultType="hashmap">
		select count(*) as tot from qna where del_yn = 'y' and id = #{id}
	</select>

	<!-- Myroom(본인만) 리스트 목록 불러오기 -->
	<select id="selectMyroom" parameterType="hashmap" resultType="hashmap">
		select no, id, title, substr(date, 1, 10) as date 
		from worksave where del_yn = 'y' and id = #{id} limit #{start}, #{viewRow}
	</select>
	
	<!-- Myroom(본인만) 리스트 목록의 갯수 -->
	<select id="totCntMyroom" parameterType="hashmap" resultType="hashmap">
		select count(*) as tot from worksave where del_yn = 'y' and id = #{id}
	</select>
	
	<!-- Myroom(본인만)에서 삭제 버튼을 누를 시 안보이게 하기 위함 -->
	<update id="deleteMyroom" parameterType="hashmap" >
		update worksave set del_yn = 'd' where no = #{no}
	</update>
	
	<!-- Admin(전부) 리스트 목록 불러오기 -->
	<select id="selectAdmin" parameterType="hashmap" resultType="hashmap">
		select no, substr(title, 1, 5) as title, substr(contents, 1, 5) as contents, substr(date, 1, 10) as date, id, substr(answer, 1, 10) as answer, answercheck 
		from qna where del_yn = 'y' limit #{start}, #{viewRow}
	</select>
	
	<!-- Admin(전부) 리스트 목록의 갯수 -->
	<select id="totCntAdmin" resultType="hashmap">
		select count(*) as tot from qna where del_yn = 'y'
	</select>
	
	<!-- Admin(전부)에서 삭제 버튼을 누를 시 안보이게 하기 위함(악성댓글 삭제를 위함) -->
	<update id="deleteAdmin" parameterType="hashmap" >
		update qna set del_yn = 'd' where no = #{no}
	</update>

	<!-- Modify(email)에 email 변경 -->
	<update id="updateEmail" parameterType="hashmap" >
		update user set email = #{email} where id = #{id}
	</update>
	
	<!-- Modify(pwd)에 pwd 변경 -->
	<update id="updatePwd" parameterType="hashmap" >
		update user set pwd = #{pwd} where id = #{id}
	</update>
	
	<update id="deleteUser" parameterType="hashmap" >
		update user set del_yn = 'n' where id = #{id}
	</update>
	
	<select id="myqnaDetail" parameterType="hashmap" resultType="hashmap">
		select no, id, title, contents, answer from qna where no = #{no}
	</select>
	
	<insert id="worksaveInsert" parameterType="hashmap">
		insert into worksave(id, title, date) values(#{id}, #{title}, now())
	</insert>
	
	<insert id="workInsert" parameterType="hashmap">
		<selectKey keyProperty="ws_no" resultType="int" order="BEFORE">
		    select no from worksave order by date desc limit 0, 1
		</selectKey>
		insert into work(ws_no, class1, src, indexs, date) values(#{ws_no}, #{class}, #{src}, #{index}, now())
	</insert>
	
	<select id="workSelect" parameterType="hashmap" resultType="hashmap">
		select * from work where ws_no = #{ws_no} and indexs != '-1';
	</select>
	
	<select id="worksaveSelect" parameterType="hashmap" resultType="hashmap">
		select * from worksave where no = #{ws_no}
	</select>
	
	<delete id="workDelete" parameterType="hashmap">
		delete from work where ws_no = #{ws_no}
	</delete>
	
	<update id="worksaveUpdate" parameterType="hashmap">
		update worksave set title = #{title} where no = #{ws_no}
	</update>
	
	<insert id="workOldInsert" parameterType="hashmap">
		insert into work(ws_no, class1, src, indexs, date) values(#{ws_no}, #{class}, #{src}, #{index}, now())
	</insert>
	
	<insert id="insertqna" parameterType="hashmap">
		insert into qna (title, contents, id, date)
		values (#{title}, #{contents}, #{id}, now())
	</insert>
	
	<update id="updateqna" parameterType="hashmap">
		update qna set answer = #{answer}, answercheck = '답변완료'
		where no = #{no}
	</update>
</mapper>